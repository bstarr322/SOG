{% layout 'theme.lightbox' %}
{% assign collection_link = collection.url %}
{% assign variant_size = product.variants | size %}

{% assign showQuickViewForm = true %}
{% capture moreDetailsBtn %}<a class="modal-button2" href="{{ product.url | within: collection }}">{{ 'products.product.more_info' | t }}</a>{% endcapture %}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | product_img_url: 'grande' }}">

  <div id="content">
    <div class="container">
      <div class="pro_main_c">
        <div class="row">
          <div class="col-md-7">
            <div class="slider_1 clearfix">
              {% if product.images.size == 0 %}
                <img src="{{ '' | product_img_url: '1024x1024' }}" alt="{{ product.featured_image.alt | escape }}">
              {% else %}
                <div class="slides"><img src="{{ product.featured_image.src | product_img_url: '1024x1024' }}" alt="{{ product.featured_image.alt | escape }}"></div>
              {% endif %}                
            </div>
          </div>
          <div class="col-md-5">
            <h3>{{ product.title }}</h3>
            {% if settings.product_reviews %}
              <div class="qv-reviews clearfix mb20">
                <span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>
              </div>
            {% endif %}
            <p class="product-info-price mb20 mt10"><span id="productPrice" itemprop="price" class="money">{{ product.selected_or_first_available_variant.price | money }}</span></p>
            <p class="text-smaller text-muted">{{ product.description | strip_html | truncate: 350 }}</p>

            {% if showQuickViewForm %}
              <form class="form-add-to-cart form-horizontal" action="/cart/add" method="post" enctype="multipart/form-data" id="form-{{ product.url | within: collection | replace: '/', '-' }}">
                {% assign productVariantsSize = product.variants.size %}
                {% assign productOptionsSize = product.options.size %}
                {% if productVariantsSize > 1 %}
                  <select name="id" id="product-select-{{ product.id }}" class="product-variants">
                    {% for variant in product.variants %}
                      {% if variant.available %}
                        <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>
                      {% else %}
                        <option disabled="disabled">{{ variant.title }} - {{ 'products.product.sold_out' | t }}</option>
                      {% endif %}
                    {% endfor %}
                  </select>

                  {% if settings.show_product_swatches %}
                    {% if product.variants.size > 1 %}
                    {% for option in product.options %}
                    {% include 'swatch' with option qvScope:scope product:product %}
                    {% endfor %}
                    {% endif %}
                  {% endif %}
                {% else %}
                  <input type="hidden" name="id" id="product-select-{{ product.id }}" value="{{ product.variants[0].id }}" />
                {% endif %}
                <hr>
                {% if product.available %}
                  <input type="submit" name="add" class="modal-button" id="addToCart" value="{{ 'products.product.add_to_cart' | t }}">
                {% else %}
                  <input type="submit" name="add" class="modal-button disabled" id="addToCart" value="{{ 'products.product.sold_out' | t }}" disabled>
                {% endif %}
                {{ moreDetailsBtn }}

              </form>
            {% else %}
              {{ moreDetailsBtn }}
            {% endif %}
            
          </div>
        </div>
      </div>
    </div>
  </div>

</div>

<script>

  selectCallback = function (variant, selector) {
    if (variant) { $("#sku").html(variant.id); }
    var $product = $('#product-' + selector.product.id +'-gallery');
    if (variant && variant.featured_image && $product.is(":visible")) {
      var original_image = $(".flex-active-slide img", $product), new_image = variant.featured_image;
      Shopify.Image.switchImage(new_image, original_image[0], function (new_image_src, original_image, element) {
        $product.flexslider($('[data-image-id="' + variant.featured_image.id + '"]').data('index'));
      });
    }

    {% if settings.show_product_swatches %}
    // BEGIN SWATCHES
    if (variant) {
      var form = jQuery('#' + selector.domIdPrefix).closest('form');
      for (var i=0,length=variant.options.length; i<length; i++) {
        var radioButton = form.find('.swatch[data-option-index="' + i + '"] :radio[value="' + variant.options[i] +'"]');
        if (radioButton.size()) {
          radioButton.get(0).checked = true;
        }
      }
    }
    // END SWATCHES
    {% endif %}

    var addToCart = $('#addToCart'),
        productPrice = $('#productPrice'),
        comparePrice = $('#comparePrice');

    if (variant) {
      if (variant.available) {
        // We have a valid product variant, so enable the submit button
        addToCart.removeClass('disabled').prop('disabled', false).val('{{ "products.product.add_to_cart" | t }}');

      } else {
        // Variant is sold out, disable the submit button
        addToCart.val('{{ "products.product.sold_out" | t }}').addClass('disabled').prop('disabled', true);
      }

      // Regardless of stock, update the product price
      productPrice.html(Shopify.formatMoney(variant.price, "{{ shop.money_format }}"));

    // Also update and show the product's compare price if necessary
    if ( variant.compare_at_price > variant.price ) {
    comparePrice
    .html(Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}"))
    .show();
    } else {
      comparePrice.hide();
    }

  } else {
    // The variant doesn't exist, disable submit button.
    // This may be an error or notice that a specific variant is not available.
    addToCart.val('{{ "products.product.unavailable" | t }}').addClass('disabled').prop('disabled', true);
    }
  };

  jQuery(function($) {
    $product = $('#product-' + {{ product.id }});
    new Shopify.OptionSelectors("product-select-{{ product.id }}", { product: {{ product | json }}, onVariantSelected: selectCallback{% if product-form == 'product' %}, enableHistoryState: true{% endif %} });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first }}</label>');
    {% endif %}

   // Hide selectors if we only have 1 variant and its title contains 'Default'.
   {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
     $('.selector-wrapper').hide();
   {% endif %}
      
    // Create Make a Selection.
    {% if product.variants.size > 1%}
      $('#addToCart').val('Make a Selection');
      $('#addToCart').addClass('disabled').attr('disabled', 'disabled');
      
      {% unless product.available %}
        $('#addToCart').show();
      {% endunless %}
      
    {%else%}
      $('#addToCart').removeClass('disabled');
      {% unless product.available %}
        $('#addToCart').addClass('disabled').hide();
      {% endunless %}
    {%endif%}
      
    // Unchecked when make a selection.
    var radios = jQuery('.product-form__item--swatch').find("input[type='radio']");
      for ( i = 0; i < radios.length; i++ ) {
        radios.get(i).checked = false;
    }

    // Auto-select first available variant on page load. Otherwise the product looks sold out.
    {% assign found_one_in_stock = false %}
    {% for variant in product.variants %}
    {% if variant.available and found_one_in_stock == false %}
    {% assign found_one_in_stock = true %}
    {% for option in product.options %}
    $('.single-option-selector:eq({{ forloop.index0 }})').val({{ variant.options[forloop.index0] | json }});
    {% endfor %}
    {% endif %}
    {% endfor %}

  });

  jQuery(document).ready(function($){

    // Initialize popup as usual
    $('.slides').magnificPopup({
      delegate: 'a',
      type: 'image',
      closeOnContentClick: false,
      closeBtnInside: false,
      mainClass: 'mfp-with-zoom mfp-img-mobile',
      image: {
        verticalFit: true
      },
      gallery: {
        enabled: true
      },
      zoom: {
        enabled: true,
        duration: 300, // don't foget to change the duration also in CSS
        opener: function(element) {
          return element.find('img');
          }
        }
      });
  });
</script>
